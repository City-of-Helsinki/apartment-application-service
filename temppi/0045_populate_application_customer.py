# Generated by Django 3.2.11 on 2022-02-13 21:11

from django.db import migrations


def populate_application_customer(apps, schema_editor):
    Application = apps.get_model("application_form", "Application")
    Applicant = apps.get_model("application_form", "Applicant")
    Customer = apps.get_model("customer", "Customer")
    Profile = apps.get_model("users", "Profile")

    def get_or_create_customer(application):
        if not application.profile:
            return None

        try:
            secondary_applicant = application.applicants.get(is_primary_applicant=False)
        except Applicant.DoesNotExist:
            customer = Customer.objects.get_or_create(
                primary_profile=application.profile, secondary_profile=None
            )[0]
            return customer

        secondary_applicant_ssn = (
            secondary_applicant.date_of_birth.strftime("%d%m%y")
            + secondary_applicant.ssn_suffix
        )

        try:
            customer = Customer.objects.get(
                primary_profile=application.profile,
                secondary_profile__national_identification_number=secondary_applicant_ssn,  # noqa
            )
            return customer
        except Customer.DoesNotExist:
            pass

        secondary_profile = Profile.objects.create(
            first_name=secondary_applicant.first_name,
            last_name=secondary_applicant.last_name,
            email=secondary_applicant.email,
            phone_number=secondary_applicant.phone_number,
            street_address=secondary_applicant.street_address,
            city=secondary_applicant.city,
            postal_code=secondary_applicant.postal_code,
            contact_language=secondary_applicant.contact_language or "fi",
            national_identification_number=secondary_applicant_ssn,
        )
        customer = Customer.objects.create(
            primary_profile=application.profile,
            secondary_profile=secondary_profile,
        )
        return customer

    for application in Application.objects.all():
        application.customer = get_or_create_customer(application)
        application.save(update_fields=("customer",))


def populate_application_profile(apps, schema_editor):
    Application = apps.get_model("application_form", "Application")

    for application in Application.objects.all():
        application.profile = (
            application.customer.primary_profile if application.customer else None
        )
        application.save(update_fields=("profile",))


class Migration(migrations.Migration):

    dependencies = [
        ("application_form", "0044_add_application_customer"),
    ]

    operations = [
        migrations.RunPython(
            populate_application_customer, populate_application_profile
        ),
    ]
